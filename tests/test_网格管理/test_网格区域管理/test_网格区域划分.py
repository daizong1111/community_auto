"""
此模块使用 Playwright 框架实现会议室管理模块的 UI 自动化测试，
包含增、删、改、查功能的测试用例。
"""
import random
from datetime import datetime

import allure

# 生成随机身份证号码和手机号码，防止数据重复
from faker import Faker

fake = Faker('zh_CN')

from playwright.sync_api import expect, Page
from base_case import BaseCase
import pytest
import logging

from pages.网格管理.网格区域管理.网格区域划分 import PageAreaMesh
from pages.基础信息.实有房屋.楼栋管理 import PageFloor


# 配置日志记录器
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# 获取当前时间，精确到时分秒
current_time = datetime.now()
# 将时间转换为字符串格式
time_string = current_time.strftime("%Y-%m-%d,%H:%M:%S")


@pytest.fixture(scope="module")
def 网格区域划分页面(浏览器已打开的页面):
    # 将页面封装为网格区域划分页面
    page = PageAreaMesh(浏览器已打开的页面)
    page.跳转到某菜单("网格管理", "网格区域管理/网格区域划分")
    yield page

楼栋名称 = "测试楼栋与片区的关联"
楼栋名称_修改后 = "测试楼栋与片区的关联_修改后"

@pytest.fixture(scope="function")
def 夹具_确保楼栋存在(浏览器已打开的页面):
    楼栋管理页面 = PageFloor(浏览器已打开的页面)
    楼栋管理页面.跳转到某菜单('基础信息', '实有房屋/楼栋管理')
    # 查找待删除的楼栋
    楼栋管理页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(楼栋名称=楼栋名称)
    楼栋管理页面.click_button("搜索")
    楼栋数量 = 楼栋管理页面.获取页面统计的总数据量()
    if 楼栋数量 == 0:
        # 新增一个楼栋
        楼栋号 = str(random.randint(1, 99))
        # 点击新增按钮
        楼栋管理页面.click_button("新增")
        # 填写表单信息
        楼栋管理页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
            表单最上层定位=楼栋管理页面.page.locator('//div[@aria-label="楼栋信息"]'), 小区名称="小区99", 楼栋号=楼栋号,
            单元数="3", 楼层数="20", 楼栋名称=楼栋名称, 经度="334", 纬度="227")
        # 小区信息页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(备注=备注)
        # 点击提交按钮
        楼栋管理页面.click_button("确定")
        # 断言操作成功字样在页面出现
        expect(楼栋管理页面.page.get_by_text("保存成功")).to_be_visible(timeout=5000)
    yield 浏览器已打开的页面

def 将楼栋名称改回来(page:Page):
    楼栋管理页面 = PageFloor(page)
    楼栋管理页面.跳转到某菜单('基础信息', '实有房屋/楼栋管理')
    # 查找待操作的楼栋
    楼栋管理页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(楼栋名称=楼栋名称_修改后)
    楼栋管理页面.click_button("搜索")
    # 点击编辑按钮
    楼栋管理页面.点击编辑按钮(楼栋名称_修改后)
    # 填写表单信息
    楼栋管理页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
        表单最上层定位=楼栋管理页面.page.locator('//div[@aria-label="楼栋信息"]'), 楼栋名称=楼栋名称)
    楼栋管理页面.click_button("确定")
    楼栋管理页面.点击提示弹窗中的确定按钮()
    expect(楼栋管理页面.page.get_by_text("保存成功!")).to_be_visible(timeout=5000)

# 定义一个模块级变量，用于标记是否新增成功
NEW_PERSON_ADDED = False


@pytest.mark.usefixtures("后置操作_重置查询条件")
@pytest.mark.usefixtures("网格区域划分页面")
class TestAdd(BaseCase):
    @pytest.mark.parametrize(
        "表单数据",

        [
            {"网格名称": f"新增-成功{time_string}", "所属居委会": "中电数智街道/中电数智社区", "总户数": "100",
             "网格描述": "这个网格非常大",
             "地图坐标集": "{116.794371,33.971676},{116.794394,33.971565},{116.794367,33.971515}", "经度": "116.794380",
             "纬度": "33.971596",
             "网格图片": r"C:\Users\Administrator\Pictures\111.png"
             }

            # 添加更多测试数据集
        ],
        # ids=["新增-成功"
        #
        #      ]
    )
    @allure.step("测试新增人员-成功")
    def test_add_success(self, 网格区域划分页面,
                         表单数据: dict
                         ):
        global NEW_PERSON_ADDED
        try:
            网格区域划分页面.click_button("新增")
            self.log_step("点击新增按钮")

            网格区域划分页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
                **表单数据)
            网格区域划分页面.填写表单_新增片区()
            self.log_step("填写表单信息")

            网格区域划分页面.click_button("确定")
            self.log_step("提交表单")

            expect(网格区域划分页面.page.get_by_text("新增成功")).to_be_visible(timeout=5000)
            self.log_step("验证新增成功-页面提示信息")

            网格区域划分页面.输入查询条件(网格描述=表单数据.get("网格描述"), 居委会=表单数据.get("所属居委会"),
                                          网格名称=表单数据.get("网格名称"))
            网格区域划分页面.click_button("搜索")
            网格区域划分页面.等待表格加载完成()
            self.log_step("查询刚才新增的数据")
            loc_新增的行 = 网格区域划分页面.get_table_rows().filter(has_text=表单数据.get("网格名称")).filter(
                has_text=表单数据.get("所属居委会").split("/")[-1]).filter(has_text=表单数据.get("总户数")).filter(
                has_text=表单数据.get("网格描述")).first
            # 检查表格中是否有新增的数据
            expect(loc_新增的行).to_be_visible()

            # 标记新增成功
            NEW_PERSON_ADDED = True
        except Exception as e:
            raise e

    # @pytest.mark.usefixtures("后置操作_刷新页面")
    # @pytest.mark.parametrize(
    #     "表单数据",
    #
    #     [
    #         {"商铺名称": f"彭超", "所属居委会": "中电数智街道/中电数智社区", "所属网格": "测试网格1213",
    #          "统一信用代码": "91310115MA1K41MXQ5",
    #          "负责人": "石童涛", "联系方式": "13955499272", "商铺类型": "测试", "商铺等级": "小型商铺",
    #          "归属部门": "合肥市市场管理局", "入驻时间": "2015-07-13", "具体位置": "安徽省合肥市蜀山区芙蓉社区1005号",
    #          "执照日期": "2015-06-10,2029-07-28",
    #          "营业时间": "06:20:00,21:30:00",
    #          "门头照": r"C:\Users\Administrator\Pictures\111.png"
    #          }
    #     ],
    # )
    # @allure.step("测试新增商铺失败-去重校验：同一网格内商铺名称不能重复")
    # def test_add_repeat_validation(self, 网格区域划分页面,
    #                                表单数据: dict
    #                                ):
    #     网格区域划分页面.输入查询条件(商铺名称=表单数据.get("商铺名称"))
    #     网格区域划分页面.click_button("搜索")
    #     新增前的数据量 = 网格区域划分页面.获取页面统计的总数据量()
    #     # 点击新增按钮
    #     网格区域划分页面.click_button("新增")
    #     self.log_step("点击新增按钮")
    #     # 填写表单信息
    #     网格区域划分页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据)
    #     self.log_step("填写表单信息")
    #     # 点击提交按钮
    #     网格区域划分页面.click_button("提交")
    #     网格区域划分页面.点击提示弹窗中的确定按钮()
    #     self.log_step("提交表单")
    #     # 断言该人员已存在字样在页面出现
    #     网格区域划分页面.验证页面顶部出现全局提示("名称已存在")
    #     self.log_step("验证新增失败-去重校验-页面提示信息")
    #     # 刷新页面
    #     网格区域划分页面.page.reload()
    #     # 填写搜索框
    #     网格区域划分页面.输入查询条件(商铺名称=表单数据.get("商铺名称"))
    #     网格区域划分页面.click_button("搜索")
    #     新增后的数据量 = 网格区域划分页面.获取页面统计的总数据量()
    #     # 检查表格中是否有新增的数据
    #     assert 新增前的数据量 == 新增后的数据量
    #     self.log_step("验证查询列表中无新增的数据")


@pytest.mark.usefixtures("网格区域划分页面")  # 显式声明夹具
class TestEdit(BaseCase):
    def setup_class(self):
        if not NEW_PERSON_ADDED:
            pytest.skip("新增用例执行失败，跳过修改相关测试")

    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.parametrize(
        "表单数据_搜索框, 表单数据",
        [
            (
                    {
                        "居委会": "中电数智街道/中电数智社区",
                        "网格名称": f"新增-成功{time_string}",
                        # "网格名称": "新增-成功2025-07-10,10:38:00"
                    },
                    {"网格名称": f"修改-成功{time_string}", "所属居委会": "中电数智街道/中电数智社区（演示）",
                     "总户数": "22",
                     "网格描述": "网格网格你真大",
                     "地图坐标集": "{116.779540,33.966398}",
                     "经度": "116.779540",
                     "纬度": "33.966398",
                     "网格图片": ""
                     },
            ),
        ],
        # ids=["修改-成功"]
    )
    @allure.step("测试修改小区")
    def test_edit_success(self, 网格区域划分页面,
                          表单数据_搜索框: dict, 表单数据: dict):
        # 输入查询条件
        网格区域划分页面.输入查询条件(**表单数据_搜索框)
        网格区域划分页面.click_button("搜索")
        网格区域划分页面.等待表格加载完成()
        # 点击编辑按钮
        网格区域划分页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
        self.log_step("点击编辑按钮")
        # 填写表单信息
        网格区域划分页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
            **表单数据)
        # TODO:未对片区进行修改
        self.log_step("填写表单信息")
        # 点击提交按钮
        网格区域划分页面.click_button("确定")
        self.log_step("点击提交按钮")
        # 点击提示弹窗中的确定按钮
        网格区域划分页面.点击提示弹窗中的确定按钮()
        # 断言操作成功字样在页面出现
        expect(网格区域划分页面.page.get_by_text("修改成功")).to_be_visible(timeout=5000)
        self.log_step("验证修改成功-页面提示信息")
        # 查找修改后的数据
        网格区域划分页面.输入查询条件(**{"居委会":表单数据.get("所属居委会"), "网格名称": f"修改-成功{time_string}"})
        网格区域划分页面.click_button("搜索")
        网格区域划分页面.等待表格加载完成()
        # 检查表格中数据是否成功修改
        网格区域划分页面.点击表格中某行按钮(行号=1, 按钮名="详情")
        # TODO: 未校验片区是否成功修改
        网格区域划分页面.校验表单中数据成功修改(网格名称=表单数据.get("网格名称"),
                                                所属居委会=表单数据.get("所属居委会").split()[-1],
                                                总户数=表单数据.get("总户数"),
                                                网格描述=表单数据.get("网格描述"),
                                                地图坐标集=表单数据.get("地图坐标集"),
                                                经度=表单数据.get("经度"), 纬度=表单数据.get("纬度"),
                                                )

    # @pytest.mark.usefixtures("后置操作_刷新页面")
    # @pytest.mark.parametrize(
    #     "表单数据_搜索框, 表单数据",
    #
    #     [
    #         (
    #                 {
    #                     "商铺名称": f"修改-成功{time_string}",
    #                     # "商铺名称": "新增-成功2025-06-26,11:46:24"
    #                 },
    #                 {"商铺名称": f"彭超", "所属居委会": "中电数智街道/中电数智社区",
    #                  "所属网格": "测试网格1213",
    #                  "统一信用代码": "91440101MA5JL12345",
    #                  "负责人": "力洋", "联系方式": "18855429112", "商铺类型": "测试类型1", "商铺等级": "大型商铺",
    #                  "归属部门": "淮南市人力资源局", "入驻时间": "2025-02-13",
    #                  "具体位置": "安徽省淮南市田家庵区福海元社区103号",
    #                  "执照日期": "2000-02-10,2017-07-28",
    #                  "营业时间": "09:20:00,15:30:00",
    #                  "门头照": r"C:\Users\Administrator\Pictures\111.png"
    #                  },
    #         ),
    #     ],
    # )
    # @allure.step("测试编辑失败-去重校验：同一网格下商铺名称不能重复")
    # def test_edit_repeat_validation(self, 网格区域划分页面, 表单数据_搜索框: dict,
    #                                 表单数据: dict
    #                                 ):
    #     # 输入查询条件
    #     网格区域划分页面.输入查询条件(**表单数据_搜索框)
    #     网格区域划分页面.click_button("搜索")
    #     网格区域划分页面.等待表格加载完成()
    #     # 点击编辑按钮
    #     网格区域划分页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
    #     self.log_step("点击编辑按钮")
    #     # 填写表单信息
    #     网格区域划分页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
    #         **表单数据)
    #     self.log_step("填写表单信息")
    #     # 点击提交按钮
    #     网格区域划分页面.click_button("提交")
    #     网格区域划分页面.点击提示弹窗中的确定按钮()
    #     self.log_step("提交表单")
    #     # 断言该人员已存在字样在页面出现
    #     网格区域划分页面.验证页面顶部出现全局提示("名称已存在")
    #     self.log_step("验证编辑失败-去重校验-页面提示信息")
    #     # 刷新页面
    #     网格区域划分页面.page.reload()
    #     # 填写搜索框
    #     网格区域划分页面.输入查询条件(**表单数据_搜索框)
    #     网格区域划分页面.click_button("搜索")
    #     网格区域划分页面.等待表格加载完成()
    #     # 检查原来的数据是否没了
    #     expect(网格区域划分页面.get_table_rows()).to_have_count(1)
    #     self.log_step("验证查询列表中仍然有旧的数据")


# @pytest.mark.usefixtures("网格区域划分页面")  # 显式声明夹具
# class TestDetail(BaseCase):
#     @pytest.mark.usefixtures("后置操作_刷新页面")
#     @pytest.mark.parametrize(
#         "行号",
#         [
#             (1),
#         ],
#         # ids=["修改-成功"]
#     )
#     @allure.step("测试商铺详情")
#     def test_detail(self, 网格区域划分页面, 行号):
#         list_某行 = 网格区域划分页面.获取表格中指定行的所有字段值(行号)
#         网格区域划分页面.点击表格中某行按钮(行号=行号, 按钮名="详情")
#         网格区域划分页面.校验表单中数据成功修改(
#             **{"商铺名称": list_某行[2], "所属居委会": list_某行[4], "商铺类型": list_某行[3],
#                "所属网格": list_某行[5], "具体位置": list_某行[6], "负责人": list_某行[7],
#                "联系方式": list_某行[8], "入驻时间": list_某行[9]})


class TestQuery(BaseCase):

    @pytest.mark.usefixtures("后置操作_重置查询条件")
    @pytest.mark.parametrize(
        "表单数据",
        [
            {"网格描述": "用来测试"},
            {"居委会": "中电数智街道/中电数智社区"},
            {"居委会": "中电数智街道/中电数智社区", "网格名称": "测试网格2"},
            {"网格描述": "1111", "居委会": "中电数智街道/中电数智社区", "网格名称": "测试网格2"},
        ]
    )
    def test_query(self, 网格区域划分页面, 表单数据: dict):
        # 输入查询条件
        网格区域划分页面.输入查询条件(**表单数据)
        网格区域划分页面.click_button("搜索")
        网格区域划分页面.等待表格加载完成()

        # 定义字段与验证逻辑的映射
        def verify_网格描述():
            列表_网格描述 = 网格区域划分页面.get_column_values_by_name("网格描述")
            网格描述_预期值 = 表单数据["网格描述"]

            # 断言 列表_网格描述 中的每一项都包含 网格描述_预期值
            assert all(网格描述_预期值 in 网格描述 for 网格描述 in
                       列表_网格描述), f"查询条件-网格描述:{网格描述_预期值}, 表格中的网格描述为:{列表_网格描述}"

        def verify_居委会():
            列表_居委会 = 网格区域划分页面.get_column_values_by_name("所属居委会")
            居委会_预期值 = 表单数据["居委会"].split('/')[-1]
            # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
            assert all(
                居委会_预期值 == 居委会 for 居委会 in
                列表_居委会), f"查询条件-居委会:{居委会_预期值}, 表格中的居委会为:{列表_居委会}"

        def verify_网格名称():
            列表_网格 = 网格区域划分页面.get_column_values_by_name("网格名称")
            网格_预期值 = 表单数据["网格名称"]
            # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
            assert all(
                网格_预期值 == 网格 for 网格 in
                列表_网格), f"查询条件-网格:{网格_预期值}, 表格中的网格为:{列表_网格}"

        # 字典映射字段到验证函数
        验证规则 = {
            "网格描述": verify_网格描述,
            "居委会": verify_居委会,
            "网格名称": verify_网格名称,
        }

        # 执行匹配的验证规则
        for field in 表单数据:
            if field in 验证规则:
                验证规则[field]()
        self.log_step("检验表格中数据是否满足查询条件")


class TestReset(BaseCase):
    def test_reset(self, 网格区域划分页面):
        # 输入查询条件
        网格区域划分页面.输入查询条件(
            **{"网格描述": "1111", "居委会": "中电数智街道/中电数智社区", "网格名称": "测试网格2"})

        self.log_step("输入查询条件")

        # 点击重置按钮，获取查询接口响应的数据
        网格区域划分页面.click_button("重置")

        网格区域划分页面.校验查询条件成功修改(**{"网格描述":"", "居委会": "", "网格名称": ""})
        # 对比页面查询到的总条数和无查询条件时查数据库的总条数
        # 数据条数_页面 = 网格区域划分页面.获取页面统计的总数据量()



@pytest.mark.usefixtures("后置操作_重置查询条件")
class TestDelete(BaseCase):
    def setup_class(self):
        if not NEW_PERSON_ADDED:
            pytest.skip("新增用例执行失败，跳过删除相关测试")
    @pytest.mark.parametrize(
        "表单数据_查询",
        [
            {
                 "居委会": "中电数智街道/中电数智社区（演示）",
                 "网格名称": f"修改-成功{time_string}",
                 # "网格名称": "修改-成功2025-07-10,10:46:33"
             },
            # f"修改-成功{车牌号_修改后}"
        ]
    )
    def test_delete_success(self, 网格区域划分页面, 表单数据_查询):
        # 查找待删除的记录
        # 输入查询条件
        网格区域划分页面.输入查询条件(**表单数据_查询)
        网格区域划分页面.click_button("搜索")
        网格区域划分页面.等待表格加载完成()
        self.log_step("输入查询条件")
        删除前的数据量 = 网格区域划分页面.获取页面统计的总数据量()
        # 点击删除按钮
        网格区域划分页面.点击表格中某行按钮(行号=1, 按钮名="删除")
        网格区域划分页面.点击提示弹窗中的确定按钮()
        self.log_step("点击删除按钮，再点击确定按钮")
        expect(网格区域划分页面.page.get_by_text("删除成功")).to_be_visible(timeout=5000)
        self.log_step("验证页面出现删除成功字样")
        # 输入查询条件
        网格区域划分页面.click_button("搜索")
        网格区域划分页面.等待表格加载完成()
        删除后的数据量 = 网格区域划分页面.获取页面统计的总数据量()
        assert 删除后的数据量 == 删除前的数据量 - 1

    @pytest.mark.parametrize("表单数据_查询", [
        {
            "居委会": "中电数智街道/中电数智社区",
            "网格名称": "测试网格1",
        },
    ])
    def test_delete_cancel(self, 网格区域划分页面, 表单数据_查询):
        # 输入查询条件
        网格区域划分页面.输入查询条件(**表单数据_查询)
        网格区域划分页面.click_button("搜索")
        网格区域划分页面.等待表格加载完成()
        self.log_step("输入查询条件")
        删除前的数据量 = 网格区域划分页面.获取页面统计的总数据量()
        # 点击删除按钮
        网格区域划分页面.点击表格中某行按钮(行号=1, 按钮名="删除")
        网格区域划分页面.click_button("取消")
        self.log_step("点击删除按钮,弹窗后点击取消按钮")
        expect(网格区域划分页面.page.get_by_text("删除成功")).not_to_be_visible(timeout=5000)
        self.log_step("验证页面未出现删除成功字样")
        网格区域划分页面.click_button("搜索")
        # 等待1秒
        网格区域划分页面.等待表格加载完成()
        删除后的数据量 = 网格区域划分页面.获取页面统计的总数据量()
        assert 删除后的数据量 == 删除前的数据量

class TestRelevance(BaseCase):
    @pytest.mark.parametrize("测试方式", ["删除", "修改"])
    @allure.step("测试删除或修改楼栋后，楼栋和片区之间的关联性")
    def test_relevance(self, 夹具_确保楼栋存在, 测试方式:str):
        网格区域划分页面 = PageAreaMesh(夹具_确保楼栋存在)
        网格区域划分页面.跳转到某菜单('网格管理', '网格区域管理/网格区域划分')
        self.log_step("跳转到网格区域划分")
        网格区域划分页面.click_button("新增")
        网格区域划分页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(所属居委会="中电数智街道/中电数智社区")
        expect(网格区域划分页面.loc_按钮_片区名称("小区99")).to_be_visible()
        网格区域划分页面.loc_按钮_片区名称("小区99").click()
        expect(网格区域划分页面.loc_标签_楼栋名称(楼栋名称)).to_be_visible()
        self.log_step("检查楼栋在片区中存在")
        网格区域划分页面.page.reload()
        self.log_step("刷新页面，将页面上的所有弹窗消失")

        楼栋管理页面 = PageFloor(夹具_确保楼栋存在)
        楼栋管理页面.跳转到某菜单('基础信息', '实有房屋/楼栋管理')
        # 查找待操作的楼栋
        楼栋管理页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(楼栋名称=楼栋名称)
        楼栋管理页面.click_button("搜索")
        if 测试方式 == "删除":
            楼栋管理页面.点击删除按钮(楼栋名称)
            楼栋管理页面.click_button("确定")
            expect(楼栋管理页面.page.get_by_text("删除成功")).to_be_visible(timeout=5000)
            self.log_step("删除楼栋")
        else:
            # 点击编辑按钮
            楼栋管理页面.点击编辑按钮(楼栋名称)
            self.log_step("点击编辑按钮")
            # 填写表单信息
            楼栋管理页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(表单最上层定位=楼栋管理页面.page.locator('//div[@aria-label="楼栋信息"]'),楼栋名称=楼栋名称_修改后)
            楼栋管理页面.click_button("确定")
            self.log_step("点击提交按钮")
            楼栋管理页面.点击提示弹窗中的确定按钮()
            expect(楼栋管理页面.page.get_by_text("保存成功!")).to_be_visible(timeout=5000)

        楼栋管理页面.跳转到某菜单('网格管理', '网格区域管理/网格区域划分')
        self.log_step("跳转到网格区域划分")
        网格区域划分页面.click_button("新增")
        网格区域划分页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(所属居委会="中电数智街道/中电数智社区")
        expect(网格区域划分页面.loc_按钮_片区名称("小区99")).to_be_visible()
        网格区域划分页面.loc_按钮_片区名称("小区99").click()
        if 测试方式 == "删除":
            expect(网格区域划分页面.loc_标签_楼栋名称(楼栋名称)).not_to_be_visible()
            self.log_step("检查楼栋在片区中不存在")
            网格区域划分页面.page.reload()
        else:
            expect(网格区域划分页面.loc_标签_楼栋名称(楼栋名称_修改后)).to_be_visible()
            self.log_step("检查修改后的楼栋在片区中存在")
            网格区域划分页面.page.reload()
            将楼栋名称改回来(网格区域划分页面.page)
            网格区域划分页面.跳转到某菜单('网格管理', '网格区域管理/网格区域划分')