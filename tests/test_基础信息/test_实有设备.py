"""
此模块使用 Playwright 框架实现会议室管理模块的 UI 自动化测试，
包含增、删、改、查功能的测试用例。
"""
import random
import time

import allure

# 生成随机身份证号码和手机号码，防止数据重复
from faker import Faker
from joblib.testing import timeout

fake = Faker('zh_CN')

from playwright.sync_api import expect
from base_case import BaseCase
import pytest
import logging

from pages.基础信息.实有设备 import PageRealEquipment

# 配置日志记录器
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

@pytest.fixture(scope="module")
def 实有设备页面(浏览器已打开的页面):
    # 将页面封装为实有设备页面
    page = PageRealEquipment(浏览器已打开的页面)
    page.跳转到某菜单("基础信息","实有设备")
    yield page

@pytest.fixture(scope="function")
def 后置操作_修改成功后恢复数据(db_connection, 实有设备页面):
    yield 实有设备页面
    # 实有设备页面.get_db_data(db_connection, "SELECT * FROM `t_device` WHERE `device_name` = ?", (表))
    test_edit = TestEdit()
    # 这里主要修改使用场景这个字段
    表单数据_搜索框 = {"选择小区": "中电数智街道/中电数智社区/测试商圈", "设备名称或编码": "222", "设备状态": "在线",
                     "使用场景": "出店经营监测"}
    表单数据_基础 = {"设备IP：": fake.ipv4(), "设备进出：": "进", "设备端口：": "210",
     "密码：": fake.password(10), "设备类型：": "从设备", "所属楼栋：": "4栋", "使用场景：": "重点人员抓拍",
     }
    表单数据_建设单位 = {"建设单位名称：": "东南建材", "联系人：": "新星", "单位地址：": "天王城", "联系方式：": "13965524411"}
    表单数据_运维厂商 ={"运维单位：": "合肥蚕丝厂", "联系人：": "小海哥", "联系方式：": "15855332223", "单位地址：": "安徽省淮南市凤台县", "运维时间：": "2015-02-05,2025-08-29" }

    test_edit.test_edit_success(实有设备页面=实有设备页面, 表单数据_搜索框=表单数据_搜索框, 表单数据_基础=表单数据_基础, 表单数据_建设单位=表单数据_建设单位, 表单数据_运维厂商=表单数据_运维厂商)
    # 刷新页面
    实有设备页面.page.reload(timeout=3000)
# 定义一个模块级变量，用于标记是否新增成功
# NEW_PERSON_ADDED = True

@pytest.mark.usefixtures("实有设备页面")  # 显式声明夹具
class TestDetail(BaseCase):
    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.parametrize(
        "行号",
        [
            (1),
        ],
        # ids=["修改-成功"]
    )
    @allure.step("测试设备详情")
    def test_detail(self,实有设备页面,行号):
        list_某行 = 实有设备页面.获取表格中指定行的所有字段值(行号)
        实有设备页面.点击表格中某行按钮(行号=行号, 按钮名="详情")
        实有设备页面.校验表单中数据成功修改(**{"所属小区：":list_某行[1],"所属楼栋：":list_某行[2],"安装位置：":list_某行[3],"设备类别：":list_某行[4],"设备名称：":list_某行[5],"设备编码：":list_某行[6],"运维单位：":list_某行[7]})
        实有设备页面.校验在线状态(list_某行[8])


@pytest.mark.usefixtures("实有设备页面")  # 显式声明夹具
class TestEdit(BaseCase):
    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.usefixtures("后置操作_修改成功后恢复数据")
    @pytest.mark.parametrize(
        "表单数据_搜索框, 表单数据_基础, 表单数据_建设单位, 表单数据_运维厂商",
        [
            (
                    {"选择小区": "中电数智街道/中电数智社区/测试商圈", "设备名称或编码": "222", "设备状态": "在线",
                     "使用场景": "重点人员抓拍"},
                    {"设备IP：": fake.ipv4(), "设备进出：": "出", "设备端口：": "442",
                     "密码：": fake.password(10), "设备类型：": "主设备", "所属楼栋：": "1栋", "使用场景：": "出店经营监测",
                     },
                    {"建设单位名称：": "安徽省中铁四局总部", "联系人：": "石童涛", "单位地址：": "安徽省合肥市包河区包河大道1004号", "联系方式：": "15655443378"},
                    {"运维单位：": "中国铁塔", "联系人：": "石天栋", "联系方式：": "15655443382", "单位地址：": "安徽省合肥市庐阳区天王巷4号", "运维时间：": "2025-02-05,2035-08-29" }
            ),
        ],
        # ids=["修改-成功"]
    )
    @allure.step("测试修改小区")
    def test_edit_success(self, 实有设备页面,
                          表单数据_搜索框: dict, 表单数据_基础: dict, 表单数据_建设单位: dict, 表单数据_运维厂商: dict):
        # 输入查询条件
        实有设备页面.输入查询条件(**表单数据_搜索框)
        实有设备页面.click_button("搜索")
        实有设备页面.等待表格加载完成()
        # 点击编辑按钮
        实有设备页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
        self.log_step("点击编辑按钮")
        实有设备页面.page.wait_for_timeout(1000)
        # 填写表单信息
        实有设备页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
            **表单数据_基础)
        实有设备页面.填写安装位置()
        实有设备页面.填写建设单位表单(**表单数据_建设单位)
        实有设备页面.填写运维厂商表单(**表单数据_运维厂商)
        self.log_step("填写表单信息")
        # 点击提交按钮
        实有设备页面.click_button("提交")
        self.log_step("点击提交按钮")
        # 点击提示弹窗中的确定按钮
        实有设备页面.点击提示弹窗中的确定按钮()
        # 断言操作成功字样在页面出现
        expect(实有设备页面.page.get_by_text("修改成功")).to_be_visible(timeout=5000)
        self.log_step("验证修改成功-页面提示信息")
        表单数据_搜索框["使用场景"] = 表单数据_基础.get("使用场景：")
        实有设备页面.输入查询条件(**表单数据_搜索框)
        实有设备页面.click_button("搜索")
        实有设备页面.等待表格加载完成()
        # 检查表格中数据是否成功修改
        实有设备页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
        实有设备页面.校验表单中数据成功修改(**{"设备名称：":表单数据_基础.get("设备名称："),
                                            "设备IP：":表单数据_基础.get("设备IP："),
                                            "设备进出：":表单数据_基础.get("设备进出："),
                                            "设备端口：":表单数据_基础.get("设备端口："),
                                            "设备类型：":表单数据_基础.get("设备类型："),
                                            "所属楼栋：":表单数据_基础.get("所属楼栋："),
                                            "密码：":表单数据_基础.get("密码："),
                                            "使用场景：":表单数据_基础.get("使用场景：")}
                                            )
        self.log_step("验证修改成功-详情页数据成功修改")



class TestQuery(BaseCase):

    @pytest.mark.usefixtures("后置操作_重置查询条件")
    @pytest.mark.parametrize(
        "表单数据",
        [
            {"选择小区": "中电数智街道/中电数智社区/小区99"},
            {"设备名称或编码": "666"},
            {"设备状态": "在线"},
            {"使用场景": "重点人员抓拍"},
            {"选择小区": "中电数智街道/中电数智社区/小区99", "设备名称或编码": "666", "设备状态": "在线"},

        ]
    )
    def test_query(self, 实有设备页面, 表单数据: dict):
        # 输入查询条件
        实有设备页面.输入查询条件(**表单数据)
        实有设备页面.click_button("搜索")
        实有设备页面.等待表格加载完成()

        # 定义字段与验证逻辑的映射
        def verify_小区名称():
            列表_小区名称 = 实有设备页面.get_column_values_by_name("小区")
            小区名称_预期值 = 表单数据["选择小区"].split("/")[-1]

            # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
            assert all(小区名称_预期值 in 小区名称 for 小区名称 in
                       列表_小区名称), f"查询条件-小区名称:{小区名称_预期值}, 表格中的小区名称为:{列表_小区名称}"

        def verify_设备名称或编码():
            列表_设备名称 = 实有设备页面.get_column_values_by_name("设备名称")
            列表_设备编码 = 实有设备页面.get_column_values_by_name("设备编码")

            预期值 = 表单数据["设备名称或编码"]
            # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
            assert all(预期值 in 设备名称 for 设备名称 in 列表_设备名称) or all(预期值 in 设备编码 for 设备编码 in
                                                                                列表_设备编码), f"查询条件-设备名称或编码:{预期值}, 表格中的设备名称为:{列表_设备名称}，表格中的设备编码为:{列表_设备编码}"

        def verify_设备状态():
            列表_设备状态 = 实有设备页面.get_column_values_by_name("在线状态")
            设备状态_预期值 = 表单数据["设备状态"]

            # 断言 列表_设备状态 中的每一项都包含 设备状态_预期值
            assert all(设备状态_预期值 == 设备状态 for 设备状态 in
                       列表_设备状态), f"查询条件-设备状态:{设备状态_预期值}, 表格中的设备状态为:{列表_设备状态}"

        # 字典映射字段到验证函数
        验证规则 = {
            "选择小区": verify_小区名称,
            "设备名称或编码": verify_设备名称或编码,
            "设备状态": verify_设备状态,
        }

        # 执行匹配的验证规则
        for field in 表单数据:
            if field in 验证规则:
                验证规则[field]()
        self.log_step("检验表格中数据是否满足查询条件")


class TestReset(BaseCase):
    def test_reset(self, 实有设备页面):
        # 输入查询条件
        实有设备页面.输入查询条件(选择小区="中电数智街道/中电数智社区/小区99", 设备名称或编码="666", 设备状态="在线",
                                  使用场景="重点人员抓拍")
        self.log_step("输入查询条件")

        # 点击重置按钮，获取查询接口响应的数据
        实有设备页面.click_button("重置")

        实有设备页面.校验查询条件成功修改(选择小区="", 设备名称或编码="", 设备状态="", 使用场景="")


# @pytest.mark.usefixtures("后置操作_重置查询条件")
# class TestDelete(BaseCase):
#     def setup_class(self):
#         if not NEW_PERSON_ADDED:
#             pytest.skip("新增用例执行失败，跳过删除相关测试")
#
#     @pytest.mark.parametrize(
#         "表单数据_查询",
#         [
#             {"选择小区": "中电数智街道/中电数智社区/小区99",
#              "车牌号": 随机车牌号
#              }
#
#             # f"修改-成功{车牌号_修改后}"
#         ]
#     )
#     def test_delete_success(self, 实有设备页面, 表单数据_查询):
#         # 查找待删除的记录
#         # 输入查询条件
#         实有设备页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据_查询)
#         实有设备页面.click_button("搜索")
#         实有设备页面.等待表格加载完成()
#         self.log_step("输入查询条件")
#         删除前的数据量 = 实有设备页面.获取页面统计的总数据量()
#         # 点击删除按钮
#         实有设备页面.点击删除按钮(None)
#         实有设备页面.click_button("确定")
#         self.log_step("点击删除按钮,弹窗后点击确定按钮")
#         expect(实有设备页面.page.get_by_text("删除成功")).to_be_visible(timeout=5000)
#         self.log_step("验证页面出现删除成功字样")
#         实有设备页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据_查询)
#         实有设备页面.click_button("搜索")
#         实有设备页面.等待表格加载完成()
#         删除后的数据量 = 实有设备页面.获取页面统计的总数据量()
#         assert 删除后的数据量 == 删除前的数据量 - 1
#
#     @pytest.mark.parametrize("表单数据_查询", [
#         {"选择小区": "中电数智街道/中电数智社区/小区99",
#          "车牌号": "皖A19999"
#          }
#         # f"修改-成功{车牌号_修改后}"
#     ])
#     def test_delete_cancel(self, 实有设备页面, 表单数据_查询):
#         # 输入查询条件
#         实有设备页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据_查询)
#         实有设备页面.click_button("搜索")
#         self.log_step("输入查询条件")
#         实有设备页面.等待表格加载完成()
#         删除前的数据量 = 实有设备页面.获取页面统计的总数据量()
#         # 点击删除按钮
#         实有设备页面.点击删除按钮(None)
#         实有设备页面.click_button("取消")
#         self.log_step("点击删除按钮,弹窗后点击取消按钮")
#         expect(实有设备页面.page.get_by_text("删除成功")).not_to_be_visible(timeout=5000)
#         self.log_step("验证页面未出现删除成功字样")
#         实有设备页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据_查询)
#         实有设备页面.click_button("搜索")
#         self.log_step("输入查询条件")
#         # 等待1秒
#         实有设备页面.等待表格加载完成()
#         删除后的数据量 = 实有设备页面.获取页面统计的总数据量()
#         assert 删除后的数据量 == 删除前的数据量
