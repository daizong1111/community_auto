"""
此模块使用 Playwright 框架实现会议室管理模块的 UI 自动化测试，
包含增、删、改、查功能的测试用例。
"""
import random
from datetime import datetime

import allure

# 生成随机身份证号码和手机号码，防止数据重复
from faker import Faker

fake = Faker('zh_CN')

from playwright.sync_api import expect
from base_case import BaseCase
import pytest
import logging

from pages.基础信息.场所管理.场所信息.商铺信息 import PageStoreInfo

# 配置日志记录器
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# 获取当前时间，精确到时分秒
current_time = datetime.now()
# 将时间转换为字符串格式
time_string = current_time.strftime("%Y-%m-%d,%H:%M:%S")


@pytest.fixture(scope="module")
def 商铺信息页面(浏览器已打开的页面):
    # 将页面封装为商铺信息页面
    page = PageStoreInfo(浏览器已打开的页面)
    yield page

# 定义一个模块级变量，用于标记是否新增成功
NEW_PERSON_ADDED = True


@pytest.mark.usefixtures("后置操作_重置查询条件")
@pytest.mark.usefixtures("商铺信息页面")
class TestAdd(BaseCase):
    @pytest.mark.parametrize(
        "表单数据",

        [
            {"商铺名称": f"新增-成功{time_string}", "所属居委会": "中电数智街道/中电数智社区", "所属网格": "测试网格2",
             "统一信用代码": "91310115MA1K41MXQ5",
             "负责人": "石童涛", "联系方式": "13955499272", "商铺类型": "测试", "商铺等级": "小型商铺",
             "归属部门": "合肥市市场管理局", "入驻时间": "2015-07-13", "具体位置": "安徽省合肥市蜀山区芙蓉社区1005号",
             "执照日期": "2015-06-10,2029-07-28",
             "营业时间": "06:20:00,21:30:00", #营业时间目前好像选不上
             "门头照": r"C:\Users\Administrator\Pictures\111.png"
             }

            # 添加更多测试数据集
        ],
        # ids=["新增-成功"
        #
        #      ]
    )
    @allure.step("测试新增人员-成功")
    def test_add_success(self, 商铺信息页面,
                         表单数据: dict
                         ):
        global NEW_PERSON_ADDED
        try:
            商铺信息页面.click_button("新增")
            self.log_step("点击新增按钮")

            商铺信息页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
                **表单数据)
            self.log_step("填写表单信息")

            商铺信息页面.click_button("提交")
            商铺信息页面.点击提示弹窗中的确定按钮()
            self.log_step("提交表单")

            expect(商铺信息页面.page.get_by_text("新增成功")).to_be_visible(timeout=5000)
            self.log_step("验证新增成功-页面提示信息")

            负责人_加密后 = 表单数据.get("负责人")[0] + "*" * (len(表单数据.get("负责人")) - 1)
            商铺信息页面.输入查询条件(商铺名称=表单数据.get("商铺名称"))
            商铺信息页面.click_button("搜索")
            商铺信息页面.等待表格加载完成()
            self.log_step("查询刚才新增的数据")
            loc_新增的行 = 商铺信息页面.get_table_rows().filter(has_text=表单数据.get("商铺名称")).filter(
                has_text=表单数据.get("所属居委会").split("/")[-1]).filter(has_text=表单数据.get("所属网格")).filter(
                has_text=表单数据.get("具体位置")).filter(has_text=负责人_加密后).first
            # 检查表格中是否有新增的数据
            expect(loc_新增的行).to_be_visible()

            # 标记新增成功
            NEW_PERSON_ADDED = True
        except Exception as e:
            raise e

    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.parametrize(
        "表单数据",

        [
            {"商铺名称": f"彭超", "所属居委会": "中电数智街道/中电数智社区", "所属网格": "测试网格1213",
             "统一信用代码": "91310115MA1K41MXQ5",
             "负责人": "石童涛", "联系方式": "13955499272", "商铺类型": "测试", "商铺等级": "小型商铺",
             "归属部门": "合肥市市场管理局", "入驻时间": "2015-07-13", "具体位置": "安徽省合肥市蜀山区芙蓉社区1005号",
             "执照日期": "2015-06-10,2029-07-28",
             "营业时间": "06:20:00,21:30:00",
             "门头照": r"C:\Users\Administrator\Pictures\111.png"
             }
        ],
    )
    @allure.step("测试新增商铺失败-去重校验：同一网格内商铺名称不能重复")
    def test_add_repeat_validation(self, 商铺信息页面,
                                   表单数据: dict
                                   ):
        商铺信息页面.输入查询条件(商铺名称=表单数据.get("商铺名称"))
        商铺信息页面.click_button("搜索")
        新增前的数据量 = 商铺信息页面.获取页面统计的总数据量()
        # 点击新增按钮
        商铺信息页面.click_button("新增")
        self.log_step("点击新增按钮")
        # 填写表单信息
        商铺信息页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据)
        self.log_step("填写表单信息")
        # 点击提交按钮
        商铺信息页面.click_button("提交")
        商铺信息页面.点击提示弹窗中的确定按钮()
        self.log_step("提交表单")
        # 断言该人员已存在字样在页面出现
        商铺信息页面.验证页面顶部出现全局提示("名称已存在")
        self.log_step("验证新增失败-去重校验-页面提示信息")
        # 刷新页面
        商铺信息页面.page.reload()
        # 填写搜索框
        商铺信息页面.输入查询条件(商铺名称=表单数据.get("商铺名称"))
        商铺信息页面.click_button("搜索")
        新增后的数据量 = 商铺信息页面.获取页面统计的总数据量()
        # 检查表格中是否有新增的数据
        assert 新增前的数据量 == 新增后的数据量
        self.log_step("验证查询列表中无新增的数据")


@pytest.mark.usefixtures("商铺信息页面")  # 显式声明夹具
class TestEdit(BaseCase):
    def setup_class(self):
        if not NEW_PERSON_ADDED:
            pytest.skip("新增用例执行失败，跳过修改相关测试")

    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.parametrize(
        "表单数据_搜索框, 表单数据",
        [
            (
                    {
                        "商铺名称": f"新增-成功{time_string}",
                        # "商铺名称": "新增-成功2025-06-26,16:46:16"
                    },
                    {"商铺名称": f"修改-成功{time_string}", "所属居委会": "中电数智街道/中电数智社区",
                     "所属网格": "788",
                     "统一信用代码": "91440101MA5JL12345",
                     "负责人": "力洋", "联系方式": "18855429112", "商铺类型": "测试类型1", "商铺等级": "大型商铺",
                     "归属部门": "淮南市人力资源局", "入驻时间": "2025-02-13",
                     "具体位置": "安徽省淮南市田家庵区福海元社区103号",
                     "执照日期": "2000-02-10,2017-07-28",
                     "营业时间": "09:20:00,15:30:00",
                     "门头照": r"C:\Users\Administrator\Pictures\111.png"
                     },
            ),
        ],
        # ids=["修改-成功"]
    )
    @allure.step("测试修改小区")
    def test_edit_success(self, 商铺信息页面,
                          表单数据_搜索框: dict, 表单数据: dict):
        # 输入查询条件
        商铺信息页面.输入查询条件(**表单数据_搜索框)
        商铺信息页面.click_button("搜索")
        商铺信息页面.等待表格加载完成()
        # 点击编辑按钮
        商铺信息页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
        self.log_step("点击编辑按钮")
        # 填写表单信息
        商铺信息页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
            **表单数据)
        self.log_step("填写表单信息")
        # 点击提交按钮
        商铺信息页面.click_button("提交")
        self.log_step("点击提交按钮")
        # 点击提示弹窗中的确定按钮
        商铺信息页面.点击提示弹窗中的确定按钮()
        # 断言操作成功字样在页面出现
        expect(商铺信息页面.page.get_by_text("编辑成功")).to_be_visible(timeout=5000)
        self.log_step("验证修改成功-页面提示信息")
        负责人_密文 = 表单数据.get("负责人")[0] + "*" * (len(表单数据.get("负责人")) - 1)
        # 联系方式的加密方式我不确定，因此暂不校验
        # 联系方式_密文 = 表单数据.get("联系方式")[0] + "*" * (len(表单数据.get("联系方式"))-1)
        商铺信息页面.输入查询条件(**{"商铺名称": f"修改-成功{time_string}"})
        商铺信息页面.click_button("搜索")
        商铺信息页面.等待表格加载完成()
        # 检查表格中数据是否成功修改
        商铺信息页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
        商铺信息页面.校验表单中数据成功修改(商铺名称=表单数据.get("商铺名称"),
                                            所属居委会=表单数据.get("所属居委会").split()[-1],
                                            所属网格=表单数据.get("所属网格"),
                                            统一信用代码=表单数据.get("统一信用代码"),
                                            负责人=负责人_密文,
                                            # 联系方式=联系方式_密文,
                                            商铺类型=表单数据.get("商铺类型"),
                                            商铺等级=表单数据.get("商铺等级"), 归属部门=表单数据.get("归属部门"),
                                            入驻时间=表单数据.get("入驻时间"), 具体位置=表单数据.get("具体位置")
                                            )

    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.parametrize(
        "表单数据_搜索框, 表单数据",

        [
            (
                    {
                        "商铺名称": f"修改-成功{time_string}",
                        # "商铺名称": "新增-成功2025-06-26,11:46:24"
                    },
                    {"商铺名称": f"彭超", "所属居委会": "中电数智街道/中电数智社区",
                     "所属网格": "测试网格1213",
                     "统一信用代码": "91440101MA5JL12345",
                     "负责人": "力洋", "联系方式": "18855429112", "商铺类型": "测试类型1", "商铺等级": "大型商铺",
                     "归属部门": "淮南市人力资源局", "入驻时间": "2025-02-13",
                     "具体位置": "安徽省淮南市田家庵区福海元社区103号",
                     "执照日期": "2000-02-10,2017-07-28",
                     "营业时间": "09:20:00,15:30:00",
                     "门头照": r"C:\Users\Administrator\Pictures\111.png"
                     },
            ),
        ],
    )
    @allure.step("测试编辑失败-去重校验：同一网格下商铺名称不能重复")
    def test_edit_repeat_validation(self, 商铺信息页面, 表单数据_搜索框: dict,
                                    表单数据: dict
                                    ):
        # 输入查询条件
        商铺信息页面.输入查询条件(**表单数据_搜索框)
        商铺信息页面.click_button("搜索")
        商铺信息页面.等待表格加载完成()
        # 点击编辑按钮
        商铺信息页面.点击表格中某行按钮(行号=1, 按钮名="编辑")
        self.log_step("点击编辑按钮")
        # 填写表单信息
        商铺信息页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(
            **表单数据)
        self.log_step("填写表单信息")
        # 点击提交按钮
        商铺信息页面.click_button("提交")
        商铺信息页面.点击提示弹窗中的确定按钮()
        self.log_step("提交表单")
        # 断言该人员已存在字样在页面出现
        商铺信息页面.验证页面顶部出现全局提示("名称已存在")
        self.log_step("验证编辑失败-去重校验-页面提示信息")
        # 刷新页面
        商铺信息页面.page.reload()
        # 填写搜索框
        商铺信息页面.输入查询条件(**表单数据_搜索框)
        商铺信息页面.click_button("搜索")
        商铺信息页面.等待表格加载完成()
        # 检查原来的数据是否没了
        expect(商铺信息页面.get_table_rows()).to_have_count(1)
        self.log_step("验证查询列表中仍然有旧的数据")


@pytest.mark.usefixtures("商铺信息页面")  # 显式声明夹具
class TestDetail(BaseCase):
    @pytest.mark.usefixtures("后置操作_刷新页面")
    @pytest.mark.parametrize(
        "行号",
        [
            (1),
        ],
        # ids=["修改-成功"]
    )
    @allure.step("测试商铺详情")
    def test_detail(self, 商铺信息页面, 行号):
        list_某行 = 商铺信息页面.获取表格中指定行的所有字段值(行号)
        商铺信息页面.点击表格中某行按钮(行号=行号, 按钮名="详情")
        商铺信息页面.校验表单中数据成功修改(
            **{"商铺名称": list_某行[2], "所属居委会": list_某行[4], "商铺类型": list_某行[3],
               "所属网格": list_某行[5], "具体位置": list_某行[6], "负责人": list_某行[7],
               "联系方式": list_某行[8], "入驻时间": list_某行[9]})

    class TestQuery(BaseCase):

        @pytest.mark.usefixtures("后置操作_重置查询条件")
        @pytest.mark.parametrize(
            "表单数据",
            [
                {"区域": "中电数智街道/中电数智社区"},
                {"所属网格": "测试网格1213"},
                {"商铺名称": "餐饮"},
                {"商铺类型": "餐饮用气场所"},
                {"区域": "中电数智街道/中电数智社区", "所属网格": "测试网格1213", "商铺名称": "餐饮",
                 "商铺类型": "餐饮用气场所"},

            ]
        )
        def test_query(self, 商铺信息页面, 表单数据: dict):
            # 输入查询条件
            商铺信息页面.输入查询条件(**表单数据)
            商铺信息页面.click_button("搜索")
            商铺信息页面.等待表格加载完成()

            # 定义字段与验证逻辑的映射
            def verify_区域():
                列表_区域 = 商铺信息页面.get_column_values_by_name("社区")
                区域_预期值 = 表单数据["区域"].split("/")[-1]

                # 断言 列表_区域 中的每一项都包含 区域_预期值
                assert all(区域_预期值 in 区域 for 区域 in
                           列表_区域), f"查询条件-区域:{区域_预期值}, 表格中的区域为:{列表_区域}"

            def verify_所属网格():
                列表_所属网格 = 商铺信息页面.get_column_values_by_name("所属网格")
                所属网格_预期值 = 表单数据["所属网格"]
                # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
                assert all(
                    所属网格_预期值 == 所属网格 for 所属网格 in
                    列表_所属网格), f"查询条件-所属网格:{所属网格_预期值}, 表格中的所属网格为:{列表_所属网格}"

            def verify_商铺名称():
                列表_商铺名称 = 商铺信息页面.get_column_values_by_name("名称")
                商铺名称_预期值 = 表单数据["商铺名称"]
                # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
                assert all(
                    商铺名称_预期值 in 商铺名称 for 商铺名称 in
                    列表_商铺名称), f"查询条件-商铺名称:{商铺名称_预期值}, 表格中的商铺名称为:{列表_商铺名称}"

            def verify_商铺类型():
                列表_商铺类型 = 商铺信息页面.get_column_values_by_name("类型")
                商铺类型_预期值 = 表单数据["商铺类型"]
                # 断言 列表_小区名称 中的每一项都包含 小区名称_预期值
                assert all(
                    商铺类型_预期值 == 商铺类型 for 商铺类型 in
                    列表_商铺类型), f"查询条件-商铺类型:{商铺类型_预期值}, 表格中的商铺类型为:{列表_商铺类型}"

            # 字典映射字段到验证函数
            验证规则 = {
                "区域": verify_区域,
                "所属网格": verify_所属网格,
                "商铺名称": verify_商铺名称,
                "商铺类型": verify_商铺类型,

            }

            # 执行匹配的验证规则
            for field in 表单数据:
                if field in 验证规则:
                    验证规则[field]()
            self.log_step("检验表格中数据是否满足查询条件")

class TestReset(BaseCase):
    def test_reset(self, 商铺信息页面):
        # 输入查询条件
        商铺信息页面.输入查询条件(
            **{"区域": "中电数智街道/中电数智社区", "所属网格": "测试网格1213", "归属部门": "餐饮部",
               "商铺名称": "餐饮", "商铺类型": "餐饮用气场所", "商铺等级": "中型商铺"})

        self.log_step("输入查询条件")

        # 点击重置按钮，获取查询接口响应的数据
        商铺信息页面.click_button("重置")

        商铺信息页面.校验查询条件成功修改(**{"区域": "", "所属网格": "", "归属部门": "",
               "商铺名称": "", "商铺类型": "", "商铺等级": ""})

@pytest.mark.usefixtures("后置操作_重置查询条件")
class TestDelete(BaseCase):
    def setup_class(self):
        if not NEW_PERSON_ADDED:
            pytest.skip("新增用例执行失败，跳过删除相关测试")

    # @pytest.mark.parametrize(
    #     "表单数据_查询,删除原因",
    #     [
    #         ({
    #             # "商铺名称": f"修改-成功{time_string}",
    #             "商铺名称": "钱氏烧烤"
    #         },
    #         "该商铺已经亏损200万元"
    #         )
    #
    #         # f"修改-成功{车牌号_修改后}"
    #     ]
    # )
    # def test_delete_success(self, 商铺信息页面, 表单数据_查询, 删除原因):
    #     # 查找待删除的记录
    #     # 输入查询条件
    #     商铺信息页面.输入查询条件(**表单数据_查询)
    #     商铺信息页面.click_button("搜索")
    #     商铺信息页面.等待表格加载完成()
    #     self.log_step("输入查询条件")
    #     删除前的数据量 = 商铺信息页面.获取页面统计的总数据量()
    #     # 点击删除按钮
    #     商铺信息页面.点击表格中某行按钮(行号=1, 按钮名="删除")
    #     商铺信息页面.填写输入框_删除原因(删除原因)
    #     商铺信息页面.click_button("确定")
    #     商铺信息页面.点击提示弹窗中的确定按钮()
    #     self.log_step("点击删除按钮,弹窗后输入删除原因，再点击确定按钮")
    #     expect(商铺信息页面.page.get_by_text("提交成功")).to_be_visible(timeout=5000)
    #     self.log_step("验证页面出现删除成功字样")
    #     # 跳转到审批页面，进行审批
    #
    #     商铺信息页面.快捷操作_填写表单_增加根据数据类确定唯一表单版(**表单数据_查询)
    #     商铺信息页面.click_button("搜索")
    #     商铺信息页面.等待表格加载完成()
    #     删除后的数据量 = 商铺信息页面.获取页面统计的总数据量()
    #     assert 删除后的数据量 == 删除前的数据量 - 1

    @pytest.mark.parametrize("表单数据_查询", [
        {
            "商铺名称": "移动端"
        },
        # f"修改-成功{车牌号_修改后}"
    ])
    def test_delete_cancel(self, 商铺信息页面, 表单数据_查询):
        # 输入查询条件
        商铺信息页面.输入查询条件(**表单数据_查询)
        商铺信息页面.click_button("搜索")
        商铺信息页面.等待表格加载完成()
        self.log_step("输入查询条件")
        删除前的数据量 = 商铺信息页面.获取页面统计的总数据量()
        # 点击删除按钮
        商铺信息页面.点击表格中某行按钮(行号=1, 按钮名="删除")
        商铺信息页面.click_button("关闭")
        self.log_step("点击删除按钮,弹窗后点击取消按钮")
        expect(商铺信息页面.page.get_by_text("提交成功")).not_to_be_visible(timeout=5000)
        self.log_step("验证页面未出现删除成功字样")
        商铺信息页面.输入查询条件(**表单数据_查询)
        商铺信息页面.click_button("搜索")
        # 等待1秒
        商铺信息页面.等待表格加载完成()
        删除后的数据量 = 商铺信息页面.获取页面统计的总数据量()
        assert 删除后的数据量 == 删除前的数据量

    # 删除提交后，审核不通过



